{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","chartRef","React","createRef","state","countries","country","slice","completeData","data","chart","visualization","deathsDataset","confirmedDataset","recoveredDataset","changeCountry","e","console","log","setState","target","value","buildFormattedData","changeDays","switchDeathsDataset","checked","switchConfirmedDataset","switchRecoveredDataset","handleVisualizationChange","this","datasets","labels","pluck","confirmed","fetchDataByVisualization","push","label","borderColor","backgroundColor","fill","deaths","recovered","config","type","options","responsive","title","display","text","tooltips","mode","intersect","hover","scales","xAxes","scaleLabel","labelString","yAxes","myChartRef","current","getContext","destroy","Chart","fetch","then","response","json","myJson","Object","keys","map","index","previousElement","undefined","date","buildDataForKey","previousValue","keyName","currentValue","absolute","percent","increment","percentIncrement","parseFloat","toFixed","country_name","fetchData","prevProps","prevState","snapshot","updateGraph","Grid","container","spacing","justify","alignItems","mb","FormControlLabel","control","Checkbox","name","color","onChange","FormControl","size","InputLabel","id","Select","labelId","MenuItem","key","TextField","ref","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7a2c2b3d.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Chart from \"chart.js\";\nimport {pluck} from \"underscore\";\nimport timeseries from \"./data/timeseries\";\nimport Grid from \"@material-ui/core/Grid\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\n\nclass App extends Component {\n  chartRef = React.createRef();\n\n  state = {\n    countries: [],\n    country: null,\n    slice: 30,\n    completeData: null,\n    data: null,\n    chart: null,\n    visualization: 'increment',\n    deathsDataset: true,\n    confirmedDataset: false,\n    recoveredDataset: false\n  }\n\n  updateGraph() {\n    let {slice, data, deathsDataset, confirmedDataset, recoveredDataset, visualization} = this.state;\n    let datasets = [];\n\n    let labels = pluck(data, 'date').slice(-slice)\n\n    if (confirmedDataset) {\n      let confirmed = this.fetchDataByVisualization(this.state.data, 'confirmed', visualization).slice(-slice)\n\n      datasets.push({\n        label: 'Confirmed',\n        borderColor: 'rgba(234, 237, 54)',\n        backgroundColor: 'rgba(234, 237, 54)',\n        data: confirmed,\n        fill: false,\n      })\n    }\n\n    if (deathsDataset) {\n      let deaths = this.fetchDataByVisualization(this.state.data, 'deaths', visualization).slice(-slice)\n\n      datasets.push({\n        label: 'Deaths',\n        borderColor: 'rgb(237,106,54)',\n        backgroundColor: 'rgb(237,106,54)',\n        data: deaths,\n        fill: false,\n      })\n    }\n\n    if (recoveredDataset) {\n      let recovered = this.fetchDataByVisualization(this.state.data, 'recovered', visualization).slice(-slice)\n\n      datasets.push({\n        label: 'Recovered',\n        borderColor: 'rgb(72,237,54)',\n        backgroundColor: 'rgb(72,237,54)',\n        data: recovered,\n        fill: false,\n      })\n    }\n\n    var config = {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: datasets\n      },\n      options: {\n        responsive: true,\n        title: {\n          display: true,\n          text: 'Daily general report COVID-19'\n        },\n        tooltips: {\n          mode: 'index',\n          intersect: false,\n        },\n        hover: {\n          mode: 'nearest',\n          intersect: true\n        },\n        scales: {\n          xAxes: [{\n            display: true,\n            scaleLabel: {\n              display: true,\n              labelString: 'Date'\n            }\n          }],\n          yAxes: [{\n            display: true,\n            scaleLabel: {\n              display: true,\n              labelString: 'Value'\n            }\n          }]\n        }\n      }\n    };\n\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n\n    if (this.state.chart) {\n      this.state.chart.destroy()\n    }\n\n    let chart = new Chart(myChartRef, config);\n\n    this.state.chart = chart\n  }\n\n  fetchData() {\n    fetch('https://pomber.github.io/covid19/timeseries.json')\n        .then(response => {\n          return response.json();\n        })\n        .then(myJson => {\n          this.setState({\n            completeData: myJson,\n            data: this.buildFormattedData(myJson['Spain']),\n            countries: Object.keys(myJson)\n          })\n        });\n\n    /*this.setState({\n      completeData: timeseries,\n      data: this.buildFormattedData(timeseries[this.state.country]),\n      countries: Object.keys(timeseries)\n    })*/\n  }\n\n  fetchDataByVisualization(data, value, visualization) {\n    return data.map(e => {\n      return e[value][visualization];\n    })\n  }\n\n  buildFormattedData(data) {\n    return data.map((e, index) => {\n      let previousElement = data[index - 1] !== undefined ? data[index - 1] : null\n\n      return {\n        date: e.date,\n        deaths: this.buildDataForKey(previousElement, \"deaths\", e),\n        recovered: this.buildDataForKey(previousElement, \"recovered\", e),\n        confirmed: this.buildDataForKey(previousElement, \"confirmed\", e),\n      };\n    })\n  }\n\n  buildDataForKey(previousValue, keyName, currentValue) {\n    if (!previousValue)\n      return {absolute: currentValue[keyName], percent: 0, increment: 0};\n\n    let increment = currentValue[keyName] - previousValue[keyName];\n    let percentIncrement = parseFloat((increment / previousValue[keyName] * 100).toFixed(3))\n\n    return {absolute: currentValue[keyName], percent: percentIncrement, increment: increment};\n  }\n\n  componentDidMount() {\n    fetch('https://ipapi.co/json/')\n        .then(response => {\n          return response.json();\n        })\n        .then(myJson => {\n          this.state.country = myJson.country_name;\n          this.fetchData()\n        })\n  }\n\n  changeCountry = e => {\n    console.log(\"cambio country\")\n    this.setState({\n      country: e.target.value,\n      data: this.buildFormattedData(this.state.completeData[e.target.value]),\n    })\n  }\n\n  changeDays = e => {\n    this.setState({\n      slice: e.target.value\n    })\n  }\n\n  switchDeathsDataset = e => {\n    this.setState({\n      deathsDataset: e.target.checked\n    })\n  }\n\n  switchConfirmedDataset = e => {\n    this.setState({\n      confirmedDataset: e.target.checked\n    })\n  }\n\n  switchRecoveredDataset = e => {\n    this.setState({\n      recoveredDataset: e.target.checked\n    })\n  }\n\n  handleVisualizationChange = e => {\n    this.setState({\n      visualization: e.target.value\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    this.updateGraph()\n  }\n\n  render() {\n    return (\n        <div>\n          <Grid container spacing={2} justify={\"space-around\"} alignItems={\"center\"} mb={2}>\n            <FormControlLabel\n                control={\n                  <Checkbox\n                      checked={this.state.deathsDataset}\n                      name=\"deathsDataset\"\n                      color=\"primary\"\n                      onChange={this.switchDeathsDataset}\n                  />\n                }\n                label=\"Deaths\"\n            />\n\n            <FormControlLabel\n                control={\n                  <Checkbox\n                      checked={this.state.recoveredDataset}\n                      name=\"recoveredDataset\"\n                      color=\"primary\"\n                      onChange={this.switchRecoveredDataset}\n                  />\n                }\n                label=\"Recovered\"\n            />\n\n            <FormControlLabel\n                control={\n                  <Checkbox\n                      checked={this.state.confirmedDataset}\n                      name=\"confirmedDataset\"\n                      color=\"primary\"\n                      onChange={this.switchConfirmedDataset}\n                  />\n                }\n                label=\"Confirmed\"\n            />\n          </Grid>\n          <Grid container spacing={2} justify={\"space-around\"} alignItems={\"center\"}>\n            <FormControl\n                size={\"medium\"}\n            >\n              <InputLabel id=\"select-country\">Country</InputLabel>\n              <Select\n                  labelId=\"select-country\"\n                  id=\"select-country\"\n                  value={this.state.country}\n                  onChange={this.changeCountry}\n              >\n                {this.state.countries.map(e => {\n                  return <MenuItem key={e} value={e}>{e}</MenuItem>\n                })}\n              </Select>\n            </FormControl>\n\n            <FormControl\n                size={\"medium\"}\n            >\n              <InputLabel id=\"select-visualization\">Visualization</InputLabel>\n              <Select\n                  labelId=\"select-visualization\"\n                  id=\"select-visualization\"\n                  value={this.state.visualization}\n                  onChange={this.handleVisualizationChange}\n              >\n                <MenuItem key={0} value={\"absolute\"}>Absolute</MenuItem>\n                <MenuItem key={1} value={\"percent\"}>Percent</MenuItem>\n                <MenuItem key={2} value={\"increment\"}>Increment</MenuItem>\n              </Select>\n            </FormControl>\n\n            <TextField size={\"medium\"} id=\"standard-required\" label=\"Latest N days\" value={this.state.slice}\n                       onChange={this.changeDays}/>\n          </Grid>\n\n          <Grid container spacing={2} justify={\"space-around\"} alignItems={\"center\"}>\n            <canvas id=\"canvas\" ref={this.chartRef}>\n            </canvas>\n          </Grid>\n        </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}