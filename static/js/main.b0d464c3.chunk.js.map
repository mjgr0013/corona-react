{"version":3,"sources":["Components/Graphs/HighchartsLine.js","Components/Tables/Table.js","App.js","serviceWorker.js","index.js"],"names":["HighchartsLine","props","state","chartData","prepareOptionsWithProps","chart","type","title","text","subtitle","xAxis","categories","yAxis","plotOptions","line","dataLabels","enabled","enableMouseTracking","series","nextProps","nextContext","this","setState","newOptions","getDefaultStructure","labels","dataset","map","element","push","name","data","highcharts","Highcharts","options","Component","Table","deaths","recovered","confirmed","Grid","container","spacing","TableContainer","component","Paper","size","aria-label","TableHead","TableRow","TableCell","length","align","TableBody","index","key","scope","App","countries","country","slice","completeData","visualization","deathsDataset","confirmedDataset","recoveredDataset","dataLoaded","changeCountry","e","target","value","buildFormattedData","changeDays","switchDeathsDataset","checked","switchConfirmedDataset","switchRecoveredDataset","handleVisualizationChange","fetch","then","response","json","myJson","Object","keys","previousElement","undefined","date","buildDataForKey","previousValue","keyName","currentValue","absolute","percent","increment","percentIncrement","parseFloat","toFixed","country_name","fetchData","datasets","pluck","fetchDataByVisualization","justify","alignItems","mb","FormControlLabel","control","Checkbox","color","onChange","label","FormControl","InputLabel","id","Select","labelId","MenuItem","TextField","getDataForHighCharts","getDataForTable","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b0d464c3.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\n\nclass HighchartsLine extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chartData: this.prepareOptionsWithProps(props)\n    };\n  }\n\n  getDefaultStructure() {\n    return {\n      chart: {\n        type: 'line'\n      },\n      title: {\n        text: ''\n      },\n      subtitle: {\n        text: 'Source: WorldClimate.com'\n      },\n      xAxis: {\n        categories: []\n      },\n      yAxis: {\n        title: {\n          text: 'Value'\n        }\n      },\n      plotOptions: {\n        line: {\n          dataLabels: {\n            enabled: true\n          },\n          enableMouseTracking: false\n        }\n      },\n      series: []\n    };\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    this.setState({\n      chartData: this.prepareOptionsWithProps(nextProps)\n    })\n  }\n\n  prepareOptionsWithProps(props) {\n    let newOptions = this.getDefaultStructure()\n    let {title, labels, dataset} = props;\n\n    newOptions.title.text = title;\n    newOptions.xAxis.categories = labels\n\n    dataset.map(element => {\n      newOptions.series.push({\n        name: element.name,\n        data: element.data\n      })\n    })\n\n    return newOptions\n  }\n\n  render() {\n    return (\n        <HighchartsReact\n            highcharts={Highcharts}\n            options={this.state.chartData}\n        />\n    )\n  }\n}\n\nexport default HighchartsLine","import React, {Component} from 'react';\nimport Grid from \"@material-ui/core/Grid\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableUi from \"@material-ui/core/Table\";\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      labels: props.labels,\n      deaths: props.deaths,\n      recovered: props.recovered,\n      confirmed: props.confirmed\n    };\n  }\n\n  componentWillReceiveProps(nextProps, nextContext) {\n    this.setState({\n      labels: nextProps.labels,\n      deaths: nextProps.deaths,\n      recovered: nextProps.recovered,\n      confirmed: nextProps.confirmed\n    })\n  }\n\n  render() {\n    let {deaths, recovered, confirmed, labels} = this.state\n\n    return (\n        <Grid container spacing={2}>\n          <TableContainer component={Paper}>\n            <TableUi size=\"small\" aria-label=\"a dense table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>Day</TableCell>\n                  {deaths.length > 0 ? <TableCell align=\"right\">Deaths</TableCell> : null}\n                  {recovered.length > 0 ? <TableCell align=\"right\">Recovered</TableCell> : null}\n                  {confirmed.length > 0 ? <TableCell align=\"right\">Confirmed</TableCell> : null}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {labels.map((element, index) => {\n                  return (\n                      <TableRow key={element}>\n                        <TableCell component=\"th\" scope=\"row\">\n                          {element}\n                        </TableCell>\n                        {deaths.length > 0 ? <TableCell align=\"right\">{deaths[index]}</TableCell> : null}\n                        {recovered.length > 0 ? <TableCell align=\"right\">{recovered[index]}</TableCell> : null}\n                        {confirmed.length > 0 ? <TableCell align=\"right\">{confirmed[index]}</TableCell> : null}\n                      </TableRow>\n                  )\n                })}\n              </TableBody>\n            </TableUi>\n          </TableContainer>\n        </Grid>\n    )\n  }\n}\n\nexport default Table","import React, {Component} from 'react';\nimport {pluck} from \"underscore\";\nimport timeseries from \"./data/timeseries\";\nimport Grid from \"@material-ui/core/Grid\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport HighchartsLine from \"./Components/Graphs/HighchartsLine\";\nimport Table from \"./Components/Tables/Table\"\n\nclass App extends Component {\n  state = {\n    countries: [],\n    country: 'Spain',\n    slice: 30,\n    completeData: null,\n    data: null,\n    visualization: 'increment',\n    deathsDataset: true,\n    confirmedDataset: false,\n    recoveredDataset: false,\n    dataLoaded: false,\n  }\n\n  fetchData() {\n    fetch('https://pomber.github.io/covid19/timeseries.json')\n        .then(response => {\n          return response.json();\n        })\n        .then(myJson => {\n          this.setState({\n            completeData: myJson,\n            data: this.buildFormattedData(myJson[this.state.country]),\n            countries: Object.keys(myJson),\n            dataLoaded: true\n          })\n        });\n\n    /*this.setState({\n      completeData: timeseries,\n      data: this.buildFormattedData(timeseries[this.state.country]),\n      countries: Object.keys(timeseries),\n      dataLoaded: true\n    })*/\n  }\n\n  fetchDataByVisualization(data, value, visualization) {\n    return data.map(e => {\n      return e[value][visualization];\n    })\n  }\n\n  buildFormattedData(data) {\n    return data.map((e, index) => {\n      let previousElement = data[index - 1] !== undefined ? data[index - 1] : null\n\n      return {\n        date: e.date,\n        deaths: this.buildDataForKey(previousElement, \"deaths\", e),\n        recovered: this.buildDataForKey(previousElement, \"recovered\", e),\n        confirmed: this.buildDataForKey(previousElement, \"confirmed\", e),\n      };\n    })\n  }\n\n  buildDataForKey(previousValue, keyName, currentValue) {\n    if (!previousValue)\n      return {absolute: currentValue[keyName], percent: 0, increment: 0};\n\n    let increment = currentValue[keyName] - previousValue[keyName];\n    let percentIncrement = parseFloat((increment / previousValue[keyName] * 100).toFixed(3))\n\n    return {absolute: currentValue[keyName], percent: percentIncrement, increment: increment};\n  }\n\n  componentDidMount() {\n    fetch('https://ipapi.co/json/')\n        .then(response => {\n          return response.json();\n        })\n        .then(myJson => {\n          this.setState({\n            country: myJson.country_name\n          }, () => {\n            this.fetchData()\n          })\n        })\n  }\n\n  changeCountry = e => {\n    this.setState({\n      country: e.target.value,\n      data: this.buildFormattedData(this.state.completeData[e.target.value]),\n    })\n  }\n\n  changeDays = e => {\n    this.setState({\n      slice: e.target.value\n    })\n  }\n\n  switchDeathsDataset = e => {\n    this.setState({\n      deathsDataset: e.target.checked\n    })\n  }\n\n  switchConfirmedDataset = e => {\n    this.setState({\n      confirmedDataset: e.target.checked\n    })\n  }\n\n  switchRecoveredDataset = e => {\n    this.setState({\n      recoveredDataset: e.target.checked\n    })\n  }\n\n  handleVisualizationChange = e => {\n    this.setState({\n      visualization: e.target.value\n    })\n  }\n\n  getDataForHighCharts() {\n    let datasets = [];\n    let {data, slice, visualization, deathsDataset, recoveredDataset, confirmedDataset} = this.state\n    let labels = pluck(data, 'date').slice(-slice)\n\n    if (deathsDataset) {\n      let deaths = this.fetchDataByVisualization(data, 'deaths', visualization).slice(-slice);\n\n      datasets.push({\n        name: 'deaths',\n        data: deaths\n      })\n    }\n\n    if (confirmedDataset) {\n      let confirmed = this.fetchDataByVisualization(data, 'confirmed', visualization).slice(-slice);\n\n      datasets.push({\n        name: 'confirmed',\n        data: confirmed\n      })\n    }\n\n    if (recoveredDataset) {\n      let recovered = this.fetchDataByVisualization(data, 'recovered', visualization).slice(-slice);\n\n      datasets.push({\n        name: 'recovered',\n        data: recovered\n      })\n    }\n\n    return {\n      labels: labels,\n      dataset: datasets\n    }\n  }\n\n  getDataForTable() {\n    let {data, slice, visualization, deathsDataset, recoveredDataset, confirmedDataset} = this.state\n\n    let labels = pluck(data, 'date').slice(-slice)\n    let deaths = deathsDataset ? this.fetchDataByVisualization(data, 'deaths', visualization).slice(-slice) : []\n    let confirmed = confirmedDataset ? this.fetchDataByVisualization(data, 'confirmed', visualization).slice(-slice) : []\n    let recovered = recoveredDataset ? this.fetchDataByVisualization(data, 'recovered', visualization).slice(-slice) : []\n\n    return {\n      deaths: deaths,\n      confirmed: confirmed,\n      recovered: recovered,\n      labels: labels\n    }\n  }\n\n  render() {\n    return (\n        <div>\n          <Grid container spacing={2} justify={\"space-around\"} alignItems={\"center\"} mb={2}>\n            <FormControlLabel\n                control={\n                  <Checkbox\n                      checked={this.state.deathsDataset}\n                      name=\"deathsDataset\"\n                      color=\"primary\"\n                      onChange={this.switchDeathsDataset}\n                  />\n                }\n                label=\"Deaths\"\n            />\n\n            <FormControlLabel\n                control={\n                  <Checkbox\n                      checked={this.state.recoveredDataset}\n                      name=\"recoveredDataset\"\n                      color=\"primary\"\n                      onChange={this.switchRecoveredDataset}\n                  />\n                }\n                label=\"Recovered\"\n            />\n\n            <FormControlLabel\n                control={\n                  <Checkbox\n                      checked={this.state.confirmedDataset}\n                      name=\"confirmedDataset\"\n                      color=\"primary\"\n                      onChange={this.switchConfirmedDataset}\n                  />\n                }\n                label=\"Confirmed\"\n            />\n          </Grid>\n          <Grid container spacing={2} justify={\"space-around\"} alignItems={\"center\"}>\n            <FormControl\n                size={\"medium\"}\n            >\n              <InputLabel id=\"select-country\">Country</InputLabel>\n              <Select\n                  labelId=\"select-country\"\n                  id=\"select-country\"\n                  value={this.state.country}\n                  onChange={this.changeCountry}\n              >\n                {this.state.countries.map(e => {\n                  return <MenuItem key={e} value={e}>{e}</MenuItem>\n                })}\n              </Select>\n            </FormControl>\n\n            <FormControl\n                size={\"medium\"}\n            >\n              <InputLabel id=\"select-visualization\">Visualization</InputLabel>\n              <Select\n                  labelId=\"select-visualization\"\n                  id=\"select-visualization\"\n                  value={this.state.visualization}\n                  onChange={this.handleVisualizationChange}\n              >\n                <MenuItem key={0} value={\"absolute\"}>Absolute</MenuItem>\n                <MenuItem key={1} value={\"percent\"}>Percent</MenuItem>\n                <MenuItem key={2} value={\"increment\"}>Increment</MenuItem>\n              </Select>\n            </FormControl>\n\n            <TextField size={\"medium\"} id=\"standard-required\" label=\"Latest N days\" value={this.state.slice}\n                       onChange={this.changeDays}/>\n          </Grid>\n\n          {this.state.dataLoaded ? <HighchartsLine title={\"COVID-19 Report\"} {...this.getDataForHighCharts()} /> : null}\n          {this.state.dataLoaded ? <Table {...this.getDataForTable()} /> : null}\n\n        </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}